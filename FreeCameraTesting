package com.hemen.threeD.testing;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.nio.FloatBuffer;
import java.util.Random;

import javax.media.opengl.GL;
import javax.media.opengl.GL2;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.GLProfile;
import javax.media.opengl.awt.GLCanvas;
import javax.media.opengl.glu.GLU;

import com.jogamp.common.nio.Buffers;
import com.jogamp.opengl.util.FPSAnimator;

public class CameraMotionTesting implements GLEventListener {
    final int nbPoints = 20000;
    
    private static String TITLE = "Perspective Testing";  // window's title
    private static final int CANVAS_WIDTH = 350;  // width of the drawable
    private static final int CANVAS_HEIGHT = 350; // height of the drawable
    private static final int FPS = 120; // animator's target frames per second
    private GLU glu;
    FloatBuffer points;
    float[] pointsData;
    private static float pX = 0.0f;
    private static float pY = 0.0f;
    private static float pZ = 5.0f;
    private static float vX = 0;
    private static float vY = 0;
    private static float vZ = -1;
    private static float yaw = 0;
    private static float pitch = 0;
    private static final float frac = 0.1f;
    
    /**
     * @param args
     */
    public static void main(String[] args) {
        GLProfile glp = GLProfile.getDefault();
        GLCapabilities caps = new GLCapabilities(glp);
        GLCanvas canvas = new GLCanvas(caps);
        canvas.setSize(new Dimension(500, 500));
        canvas.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                case KeyEvent.VK_A:
                    pitch += 0.1f;
                    vY = (float)Math.sin(pitch);
                    vZ = (float)-Math.cos(pitch);
                    break;
                case KeyEvent.VK_Z:
                    pitch -= 0.1f;
                    vY = (float)Math.sin(pitch);
                    vZ = (float)-Math.cos(pitch);
                    break;
                case KeyEvent.VK_RIGHT:
                    yaw += 0.1f;
                    vX = (float)Math.sin(yaw);
                    vZ = (float)-Math.cos(yaw);
                    break;
                case KeyEvent.VK_LEFT:
                    yaw -= 0.1f;
                    vX = (float)Math.sin(yaw);
                    vZ = (float)-Math.cos(yaw);
                    break;
                case KeyEvent.VK_UP:
                    pX += vX * frac;
                    pZ += vZ * frac;
                    break;
                case KeyEvent.VK_DOWN:
                    pX -= vX * frac;
                    pZ -= vZ * frac;
                    break;
                case KeyEvent.VK_R:
                    resetView();
                    break;
                }
            }
        });

        Frame frame = new Frame(TITLE);
        frame.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);
        frame.add(canvas);
        
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        canvas.addGLEventListener(new CameraMotionTesting());
        frame.setVisible(true);

        FPSAnimator animator = new FPSAnimator(canvas, FPS, true);
        animator.start();
    }

    public void init(GLAutoDrawable drawable) {
        GL2 gl = drawable.getGL().getGL2();
        glu = new GLU();
        
        gl.glEnableClientState(GL2.GL_VERTEX_ARRAY);
        gl.glEnable(GL2.GL_FOG);
        gl.glEnable(GL2.GL_DEPTH_TEST);
        gl.glFogi(GL2.GL_FOG_MODE, GL2.GL_EXP2);
        gl.glFogfv(GL2.GL_FOG_COLOR, new float[] {0.5f, 0.5f, 0.5f, 1.0f}, -5);
        gl.glFogf(GL2.GL_FOG_DENSITY, 0.125f);
        gl.glHint(GL2.GL_FOG_HINT, GL2.GL_NICEST);
        
        initArrayData(drawable);
    }

    @Override
    public void dispose(GLAutoDrawable drawable) {
    }

    @Override
    public void display(GLAutoDrawable drawable) {
        GL2 gl = drawable.getGL().getGL2();gl.glLoadIdentity();
        gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
        
        glu.gluLookAt(  pX, pY, pZ,
                        pX + vX, pY + vY, pZ + vZ,
                        0.0, 1.0, 0.0);
        
        update(drawable);
        render(drawable);
    }

    @Override
    public void reshape(GLAutoDrawable drawable, int x, int y, int w,
            int h) {
        //Random dot cube settings
        GL2 gl = drawable.getGL().getGL2();
        
        //prevent divide by zero
        if(h == 0) {
            h = 1;
        }
        
        float aspect = (float)w/h;
        
        gl.glViewport(0, 0, w, h);
        
        gl.glMatrixMode(GL2.GL_PROJECTION);
        gl.glLoadIdentity();
        glu.gluPerspective(45, aspect, .1, 50);
        gl.glMatrixMode(GL2.GL_MODELVIEW);
        gl.glLoadIdentity(); 
    }
    
    public void update(GLAutoDrawable drawable) {
        initArrayData(drawable);
    }
    
    public void render(GLAutoDrawable drawable) {
        GL2 gl = drawable.getGL().getGL2();

        gl.glColor3f(0.0f, 1.0f, 0.0f);
        
        gl.glDrawArrays( GL.GL_POINTS, 0, nbPoints );
       
        //gl.glLoadIdentity();
        gl.glTranslatef(5f, -1f, 0.0f);
        gl.glRotatef(45, 0.0f, 1.0f, 0.0f);
        gl.glRotatef(90, 1.0f, 0.0f, 0.0f);
        //Add fly pattern to the polygon
        gl.glEnable(GL2.GL_POLYGON);
        gl.glColor3f(0.0f, 0.0f, 1.0f);
        gl.glRectf(1f, 1f, -10f, -10f);
        gl.glDisable(GL2.GL_POLYGON);
    }

    
    private void initArrayData(GLAutoDrawable drawable) {
        GL2 gl = drawable.getGL().getGL2();
        Random random = new Random();
        
        // Create data points on the surface of a cube.
        int nbValues = nbPoints * 3;
        pointsData = new float[ nbValues ];
        for( int i=0; i < nbPoints; i+=3 ) {
            pointsData[ i ] = (float)(Math.random() - 0.5)*0.5f;
            pointsData[ i+1 ] = (float)(Math.random() - 0.5)*0.5f;
            pointsData[ i+2 ] = (float)(Math.random() - 0.5)*0.5f;
            // Cast on random side surface.
            int sel = random.nextInt( 3 );
            pointsData [ i + sel ] = (random.nextInt( 2 ) == 0) ? -0.25f : 0.25f;
        }
        
        // Points.
        points = Buffers.newDirectFloatBuffer( nbValues );
        points.put( pointsData, 0, nbValues );
        points.rewind();
        gl.glVertexPointer( 3, GL.GL_FLOAT, 0, points );
    }
    
    public static void resetView() {
        pX = 0.0f;
        pY = 0.0f;
        pZ = 5.0f;
        vX = 0;
        vY = 0;
        vZ = -1;
        yaw = 0;
        pitch = 0;
    }
}
